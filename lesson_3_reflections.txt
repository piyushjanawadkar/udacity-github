When would you want to use a remote repository rather than keeping all your work local?

when there are multiple collaborators. When you code from different machines. When you want to share you work with others.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

To prevent changes in the process of development being overwritten by an (possibly updated) copy in the remote repository.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

fork vs clone:
- fork forks repository in github onto github whereas clone clones remote (ex: github) repository onto local machine
- fork tracks the repository that was forked.
- fork is used when you want to create a copy of a repo on github to which you want to add your own modifications. You either don't want to or aren't allowed to submit changes to main repository.
- clone is used when you want to create a copy of a repo without referring to the original repo. (You can push the changes to a new repo owned by you)

fork vs branch:
- fork forks repositories - all its branches
- branch creates a new sequence of commits within a repository.
- fork is used when you want to create a new repo starting from an existing one on github.
- branch is used when you want to make your modifications to files inside a repo and want to keep it separate from the master.

clone vs branch:
- clone creates a copy of a repository - all its branches
- branch creates a new sequence of commits within a repository.
- clone is used when you want to create a new repo starting from an existing remote.
- branch is used when you want to make your modifications to files inside a repo and want to keep it separate from the master.

What is the benefit of having a copy of the last known state of the remote stored locally?

the current state of the remote repository can be fast-forward merged on fetch for later merge when you don't yet want to merge.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

revision history: Manually manage directories by timestamp / user name / status like committed or pending. Harder
code reviews: sharing link to a directory along with text file containing output of diff -u for each changed files. Harder - more work, error prone
rollbacks: switch back to an older directory. Error prone.
branching for experimental changes: Need to maintain info about which directory was copied possibly in directory name or a readme file underneath. Harder
merging branches: Need to be careful - compute the diff and manually merge. Harder.
